-- ETL DIM_CLIENTE

-- CREATE THE STORE PROCEDURE 
CREATE OR REPLACE FUNCTION PROC_DIM_CLIENTE() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_CLIENTES CURSOR FOR
SELECT
TB010_CPF,
TB010_NOME
FROM DB_VAREJO.TB010_CLIENTES TC 
WHERE NOT EXISTS (SELECT DC.CPF, DC.NOME FROM DW_VAREJO.DIM_CLIENTE DC);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_CLIENTES;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_CLIENTES INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_CLIENTE 
		(CPF, NOME) VALUES (V_LINHA.TB010_CPF, V_LINHA.TB010_NOME); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_CLIENTES;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_CLIENTE();

--------------------------------------------------------------------------------------------------

-- DIM_FORNECEDOR

CREATE OR REPLACE FUNCTION PROC_DIM_FORNECEDOR() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_FORNECEDORES CURSOR FOR
SELECT
TF.TB017_RAZAO_SOCIAL,
TF.TB017_NOME_FANTASIA 
FROM DB_VAREJO.TB017_FORNECEDORES TF 
WHERE NOT EXISTS (SELECT DF.RAZAO_SOCIAL, DF.NOME_FANTASIA FROM DW_VAREJO.DIM_FORNECEDOR DF);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_FORNECEDORES;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_FORNECEDORES INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_FORNECEDOR 
		(RAZAO_SOCIAL, NOME_FANTASIA) VALUES (V_LINHA.TB017_RAZAO_SOCIAL, V_LINHA.TB017_NOME_FANTASIA); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_FORNECEDORES;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_FORNECEDOR();

--------------------------------------------------------------------------------------------------

-- DIM_FUNCIONARIO

CREATE OR REPLACE FUNCTION PROC_DIM_FUNCIONARIO() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_FUNCIONARIOS CURSOR FOR
SELECT
TF.TB005_NOME_COMPLETO,
REPLACE(REPLACE(TF.TB005_CPF, '.', ''), '-', '')::NUMERIC AS TB005_CPF -- IRÁ RETIRAR OS '.' E '-', POSSIBILITANDO A CONVERSÃO DO VARCHAR PARA NUMERIC
FROM DB_VAREJO.TB005_FUNCIONARIOS TF 
WHERE NOT EXISTS (SELECT DF.NOME, DF.CPF FROM DW_VAREJO.DIM_FUNCIONARIO DF);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_FUNCIONARIOS;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_FUNCIONARIOS INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_FUNCIONARIO
		(NOME, CPF) VALUES (V_LINHA.TB005_NOME_COMPLETO, V_LINHA.TB005_CPF); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_FUNCIONARIOS;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_FUNCIONARIO();

--------------------------------------------------------------------------------------------------

-- DIM_LOJA_LOCALIDADE

CREATE OR REPLACE FUNCTION PROC_DIM_LOJA_LOCALIDADE() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_LOCALIDADES CURSOR FOR
SELECT
TE.TB003_BAIRRO,
TE.TB003_CEP,
TE.TB003_NUMERO_RUA,
TE.TB003_NOME_RUA,
TC.TB002_NOME_CIDADE,
TE.TB001_SIGLA_UF
FROM DB_VAREJO.TB004_LOJAS TL
JOIN DB_VAREJO.TB003_ENDERECOS TE ON TE.TB003_COD_ENDERECO = TL.TB003_COD_ENDERECO 
JOIN DB_VAREJO.TB002_CIDADES TC ON TC.TB002_COD_CIDADE = TE.TB002_COD_CIDADE
WHERE NOT EXISTS (SELECT DL.BAIRRO, DL.CEP, DL.NUMERO, DL.RUA, DL.MUNICIPIO, DL.UF FROM DW_VAREJO.DIM_LOJA_LOCALIDADE DL);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_LOCALIDADES;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_LOCALIDADES INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_LOJA_LOCALIDADE 
		(BAIRRO, CEP, NUMERO, RUA, MUNICIPIO, UF) VALUES (V_LINHA.TB003_BAIRRO, V_LINHA.TB003_CEP, V_LINHA.TB003_NUMERO_RUA, V_LINHA.TB003_NOME_RUA, V_LINHA.TB002_NOME_CIDADE, V_LINHA.TB001_SIGLA_UF); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_LOCALIDADES;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_LOJA_LOCALIDADE();

--------------------------------------------------------------------------------------------------

-- DIM_PROD_CATEGORIA

CREATE OR REPLACE FUNCTION PROC_DIM_PROD_CATEGORIA() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_CATEGORIAS CURSOR FOR
SELECT
TC2.TB013_DESCRICAO 
FROM DB_VAREJO.TB013_CATEGORIAS TC2
WHERE NOT EXISTS (SELECT DPC.DESCRICAO FROM DW_VAREJO.DIM_PROD_CATEGORIA DPC);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_CATEGORIAS;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_CATEGORIAS INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_PROD_CATEGORIA(DESCRICAO) VALUES (V_LINHA.TB013_DESCRICAO); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_CATEGORIAS;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_PROD_CATEGORIA();

--------------------------------------------------------------------------------------------------

-- DIM_PROD_TIPO

-- SERÁ SEMPRE FIXO, PORTANTO NÃO HÁ NECESSIDADE DE UMA ETL ESPECÍFICA

INSERT INTO DW_VAREJO.DIM_PROD_TIPO (TIPO) VALUES ('ALIMENTOS');
INSERT INTO DW_VAREJO.DIM_PROD_TIPO (TIPO) VALUES ('VESTUÁRIOS');
INSERT INTO DW_VAREJO.DIM_PROD_TIPO (TIPO) VALUES ('ELETRÔNICOS');

--------------------------------------------------------------------------------------------------

-- DIM_PROD_TIPO

CREATE OR REPLACE FUNCTION PROC_DIM_PRODUTO() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_PRODUTOS CURSOR FOR
SELECT
TP.TB012_DESCRICAO 
FROM DB_VAREJO.TB012_PRODUTOS TP 
WHERE NOT EXISTS (SELECT DP.DESCRICAO FROM DW_VAREJO.DIM_PRODUTO DP);

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_PRODUTOS;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_PRODUTOS INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_PRODUTO(DESCRICAO) VALUES (V_LINHA.TB012_DESCRICAO); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_PRODUTOS;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_PRODUTO();

--------------------------------------------------------------------------------------------------

-- DIM_TEMPO

CREATE OR REPLACE FUNCTION PROC_DIM_TEMPO() RETURNS VOID AS $$
DECLARE V_LINHA RECORD; -- VARIÁVEL QUE ARMAZENA A LINHA ATUAL DO CURSOR

-- DECLARACAO DO CURSOR, ATRIBUÍ AS CATEGORIAS AINDA NÃO INSERIDAS NA DIMENSÃO AO CURSOR
DECLARE CUR_GET_DATAS CURSOR FOR
SELECT DISTINCT
	EXTRACT(MONTH FROM DATAS.DATA) AS MES,
	CASE
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 0 AND 3 THEN 1
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 3 AND 6 THEN 2
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 6 AND 9 THEN 3
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 9 AND 12 THEN 4
  	END AS TRIMESTRE,
  	CASE
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 0 AND 6 THEN 1
    	WHEN EXTRACT(MONTH FROM DATAS.DATA) BETWEEN 6 AND 12 THEN 2
  	END AS SEMESTRE,
  	EXTRACT(YEAR FROM DATAS.DATA) AS ANO
	FROM (SELECT  
		TV.TB010_012_DATA AS DATA 
	FROM DB_VAREJO.TB010_012_VENDAS TV
	WHERE TV.TB010_012_DATA BETWEEN 
		(SELECT MIN(TV.TB010_012_DATA) FROM DB_VAREJO.TB010_012_VENDAS TV) 
		AND (SELECT MAX(TV.TB010_012_DATA) FROM DB_VAREJO.TB010_012_VENDAS TV)
	UNION 
	SELECT  
		TC.TB012_017_DATA AS DATA
	FROM DB_VAREJO.TB012_017_COMPRAS TC 
		WHERE TC.TB012_017_DATA BETWEEN 
			(SELECT MIN(TC.TB012_017_DATA) FROM DB_VAREJO.TB012_017_COMPRAS TC) 
			AND (SELECT MAX(TC.TB012_017_DATA) FROM DB_VAREJO.TB012_017_COMPRAS TC)
	ORDER BY DATA ASC) AS DATAS;

--LOOP QUE IRÁ EXECUTAR ENQUANTO HOUVER LINHAS NO CURSOR PARA SEREM PROCESSADAS
BEGIN
	OPEN CUR_GET_DATAS;-- ABRE O CURSOR
	LOOP 
		FETCH CUR_GET_DATAS INTO V_LINHA;	--LOOP PARA PERCORRER AS LINHAS DO CURSOR
		EXIT WHEN V_LINHA IS NULL; --SAI DO LOOP QUANDO A LINHA FOR NULL
		RAISE NOTICE 'REGISTRO %', V_LINHA;--IMPRIME A LINHA ATUAL
		INSERT INTO DW_VAREJO.DIM_TEMPO(MES, TRIMESTRE, SEMESTRE, ANO) VALUES (V_LINHA.MES, V_LINHA.TRIMESTRE, V_LINHA.SEMESTRE, V_LINHA.ANO); --INSERE NA TABELA DIMENSÃO
	END LOOP; -- LOOP
	--FECHA CURSOR E LIBERA RECURSO DE MEMÓRIA
	CLOSE CUR_GET_DATAS;--FECHA O CURSOR
END; 
$$ LANGUAGE PLPGSQL;

SELECT PROC_DIM_TEMPO();

--------------------------------------------------------------------------------------------------

-- fat_compras

Usar id dos produtos pra determinar se o tipo

Buscar informaçoes das dimensões dentro da ETL, e não no select

SELECT DISTINCT 
	PRODUTOS.DIM_PRODUTOID,
	CATEGORIAS.DIM_PROD_CATEGORIAID,
	FORNECEDOR.DIM_FORNECEDORID,
	TEMPO.DIM_TEMPOID,
	COUNT(TC.TB012_017_COD_COMPRA)
FROM DB_VAREJO.TB012_017_COMPRAS TC
JOIN DB_VAREJO.TB012_PRODUTOS TP ON TP.TB012_COD_PRODUTO = TC.TB012_COD_PRODUTO 
JOIN DW_VAREJO.DIM_PRODUTO PRODUTOS ON PRODUTOS.DESCRICAO = TP.TB012_DESCRICAO
JOIN DB_VAREJO.TB013_CATEGORIAS TC2 ON TC2.TB013_COD_CATEGORIA = TP.TB013_COD_CATEGORIA
JOIN DW_VAREJO.DIM_PROD_CATEGORIA CATEGORIAS ON CATEGORIAS.DESCRICAO = TC2.TB013_DESCRICAO
JOIN DB_VAREJO.TB017_FORNECEDORES TF ON TF.TB017_COD_FORNECEDOR = TC.TB017_COD_FORNECEDOR 
JOIN DW_VAREJO.DIM_FORNECEDOR FORNECEDOR ON FORNECEDOR.RAZAO_SOCIAL = TF.TB017_RAZAO_SOCIAL AND FORNECEDOR.NOME_FANTASIA = TF.TB017_NOME_FANTASIA
JOIN DW_VAREJO.DIM_TEMPO TEMPO ON 
		TEMPO.MES = EXTRACT(MONTH FROM TC.TB012_017_DATA)
		AND TEMPO.ANO = EXTRACT(YEAR FROM TC.TB012_017_DATA)
GROUP BY 1,2,3,4
